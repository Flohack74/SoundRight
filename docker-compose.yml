# Docker Compose configuration for SoundRight
# Alternative deployment option using Docker

version: '3.8'

services:
  # Backend API
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: soundright-backend
    restart: unless-stopped
    ports:
      - "5000:5000"
    environment:
      - NODE_ENV=production
      - PORT=5000
      - DB_PATH=/app/data/soundright.db
      - JWT_SECRET=${JWT_SECRET:-your-super-secret-jwt-key-change-this-in-production}
      - JWT_EXPIRES_IN=7d
      - UPLOAD_PATH=/app/uploads
      - MAX_FILE_SIZE=10485760
      - CORS_ORIGIN=${CORS_ORIGIN:-http://localhost:3000}
      - RATE_LIMIT_WINDOW_MS=900000
      - RATE_LIMIT_MAX_REQUESTS=100
    volumes:
      - ./backend/data:/app/data
      - ./backend/uploads:/app/uploads
    networks:
      - soundright-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Frontend (React App)
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: soundright-frontend
    restart: unless-stopped
    ports:
      - "3000:80"
    depends_on:
      - backend
    networks:
      - soundright-network
    environment:
      - REACT_APP_API_URL=http://localhost:5000/api

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: soundright-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/conf.d/default.conf
      - ./ssl:/etc/nginx/ssl
      - ./logs/nginx:/var/log/nginx
    depends_on:
      - frontend
      - backend
    networks:
      - soundright-network

  # Database (PostgreSQL - optional, for production)
  # Uncomment if you want to use PostgreSQL instead of SQLite
  # postgres:
  #   image: postgres:15-alpine
  #   container_name: soundright-postgres
  #   restart: unless-stopped
  #   environment:
  #     - POSTGRES_DB=soundright
  #     - POSTGRES_USER=soundright
  #     - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-soundright_password}
  #   volumes:
  #     - postgres_data:/var/lib/postgresql/data
  #   networks:
  #     - soundright-network

  # Redis (optional, for caching and sessions)
  # redis:
  #   image: redis:7-alpine
  #   container_name: soundright-redis
  #   restart: unless-stopped
  #   volumes:
  #     - redis_data:/data
  #   networks:
  #     - soundright-network

  # Monitoring with Prometheus (optional)
  # prometheus:
  #   image: prom/prometheus:latest
  #   container_name: soundright-prometheus
  #   restart: unless-stopped
  #   ports:
  #     - "9090:9090"
  #   volumes:
  #     - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
  #     - prometheus_data:/prometheus
  #   networks:
  #     - soundright-network

  # Grafana for visualization (optional)
  # grafana:
  #   image: grafana/grafana:latest
  #   container_name: soundright-grafana
  #   restart: unless-stopped
  #   ports:
  #     - "3001:3000"
  #   environment:
  #     - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin}
  #   volumes:
  #     - grafana_data:/var/lib/grafana
  #   networks:
  #     - soundright-network

networks:
  soundright-network:
    driver: bridge

volumes:
  # postgres_data:
  # redis_data:
  # prometheus_data:
  # grafana_data:
